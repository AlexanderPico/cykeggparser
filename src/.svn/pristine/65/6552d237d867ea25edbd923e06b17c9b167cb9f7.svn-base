package org.cytoscape.keggparser.com;

import junit.framework.JUnit4TestAdapter;
import org.cytoscape.keggparser.parsing.Parser;
import org.junit.After;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Map;

import static junit.framework.Assert.assertNull;
import static org.junit.Assert.*;

@RunWith(Parameterized.class)
public class GraphTestSuite {
    public static junit.framework.Test suite() {
        return new JUnit4TestAdapter(GraphTestSuite.class);
    }

    @Parameterized.Parameters
    public static Collection<Object[]> graphSet() {
        ArrayList<Graph[]> testGraphs = new ArrayList<>();

        Graph graph;
        Parser parser = new Parser();
        graph = parser.parse(new File("src/test/testdata/hsa04062.xml"));
        if (graph != null) testGraphs.add(new Graph[]{graph});
        graph = parser.parse(new File("src/test/testdata/hsa00010.xml"));
        if (graph != null) testGraphs.add(new Graph[]{graph});
        graph = parser.parse(new File("src/test/testdata/hsa00020.xml"));
        if (graph != null) testGraphs.add(new Graph[]{graph});
        graph = (parser.parse(new File("src/test/testdata/hsa04662.xml")));
        if (graph != null) testGraphs.add(new Graph[]{graph});
        graph = (parser.parse(new File("src/test/testdata/52_p53 signaling pathway.xml")));
        if (graph != null) testGraphs.add(new Graph[]{graph});
        testGraphs.add(new Graph[]{new Graph()});
        Object[][] objects = new Object[testGraphs.size()][1];
        int index = 0;
        for (Graph[] g : testGraphs) {
            objects[index] = testGraphs.get(index);
            index++;
        }

        return Arrays.asList(objects);
    }

    public GraphTestSuite(Graph graph) {
        this.graph = graph;
    }


    private Graph graph;
    @Rule
    public ExpectedException thrown = ExpectedException.none();

    @After
    public void tearDown() {
        thrown = ExpectedException.none();
    }


    @Test
    public void testConstructor() {
        Assert.assertNotNull(graph.getNodes());
        Assert.assertNotNull(graph.getRelations());
    }

    @Test
    public void testAddNode() {
        graph.addNode(new KeggNode(1, "", KeggNode.GENE));
        assertTrue(graph.getNodes().containsKey(1));
        thrown.expect(IllegalArgumentException.class);
        graph.addNode(null);
    }

    @Test
    public void testGetNode() {
        for (int id : new int[]{1, 100, 200}) {
            KeggNode keggNode = (new KeggNode(id, "", KeggNode.GENE));
            if (graph.getNodes().containsKey(id)) {
                graph.addNode(keggNode);
                assertEquals(id, graph.getNode(id).getId());
                assertNotSame(keggNode, graph.getNode(id));
            } else {
                graph.addNode(keggNode);
                assertEquals(keggNode, graph.getNode(id));
            }
        }
        assertNull(graph.getNode(0));
    }

    @Test
    public void testAddRelation() {
        KeggRelation keggRelation = new KeggRelation(new KeggNode(1, "", KeggNode.GENE),
                new KeggNode(2, "", KeggNode.GENE), KeggRelation.PPrel);
        graph.addRelation(keggRelation);
        assertTrue(graph.getRelations().contains(keggRelation));
        thrown.expect(IllegalArgumentException.class);
        graph.addRelation(null);
    }

    @Test
    public void testEdgeExists() {
        KeggRelation keggRelation = new KeggRelation(new KeggNode(1, "", KeggNode.GENE),
                new KeggNode(2, "", KeggNode.GENE), KeggRelation.PPrel);
        graph.addRelation(keggRelation);
        assertFalse(graph.edgeExists(null, keggRelation.getEntry1()));
        assertTrue(graph.edgeExists(keggRelation.getEntry1(), keggRelation.getEntry2()));
        assertFalse(graph.edgeExists(keggRelation.getEntry2(), keggRelation.getEntry1()));
    }

    @Test
    public void testGetRelation() {
        KeggRelation keggRelation = new KeggRelation(new KeggNode(1, "", KeggNode.GENE),
                new KeggNode(2, "", KeggNode.GENE), KeggRelation.PPrel);
        graph.addRelation(keggRelation);
        assertEquals(keggRelation, graph.getRelation(keggRelation.getEntry1(),
                keggRelation.getEntry2()));
        assertNotSame(keggRelation, graph.getRelation(keggRelation.getEntry2(),
                keggRelation.getEntry1()));
        assertNull(graph.getRelation(null, null));
    }

    @Test
    public void testGetNodeRelations() {
        for (KeggNode keggNode : graph.getNodes().values()) {
            for (KeggRelation keggRelation : graph.getNodeRelations(keggNode)) {
                assertTrue(keggRelation.getEntry1().equals(keggNode) ||
                        keggRelation.getEntry2().equals(keggNode));
            }
        }
    }

    @Test
    public void testProcessGroups() {
        graph.processGroups();
        for (Map.Entry<Integer, KeggNode> nodeEntry : graph.getNodes().entrySet()) {
            KeggNode node = nodeEntry.getValue();
            if (node.getGroupId() > 0) {
                int size = graph.getNodeRelations(node).size();
                assert size > 1;
                int inGroupRelationCount = 0;
                for (KeggRelation relation : graph.getNodeRelations(node)) {
                    if (!relation.getEntry1().equals(node)) {
                        if (relation.getEntry1().getGroupId() > 0)
                            inGroupRelationCount++;
                    } else if (!relation.getEntry2().equals(node)) {
                        if (relation.getEntry2().getGroupId() > 0)
                            inGroupRelationCount++;
                    }
                }

                if (size == 2)
                    assertTrue(inGroupRelationCount == 1 || inGroupRelationCount == 2);
                else
                    assert inGroupRelationCount == 2;
            }
        }
    }

    @Test
    public void testRemoveRelation() {


    }

}