package org.cytoscape.keggparser.actions;

import org.cytoscape.application.swing.AbstractCyAction;
import org.cytoscape.keggparser.KEGGParserPlugin;
import org.cytoscape.keggparser.com.TuningReportGenerator;
import org.cytoscape.keggparser.dialogs.KEGGTuningDialog;
import org.cytoscape.keggparser.tuning.Tuner;
import org.cytoscape.model.CyNetwork;
import org.cytoscape.view.model.CyNetworkView;
import org.cytoscape.work.AbstractTask;
import org.cytoscape.work.TaskIterator;
import org.cytoscape.work.TaskMonitor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.event.ActionEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;


public class KEGGTuningAction extends AbstractCyAction {
    /**
     * Creates a new PreferenceAction object.
     */
    protected static Logger logger = LoggerFactory.getLogger(KEGGTuningAction.class);
    private Tuner tuner;
    private KEGGTuningDialog tuningDialog;

    public KEGGTuningAction() {
        super("Pathway tuning");
        LoggerFactory.getLogger(KEGGTuningAction.class).info("KEGGTuningAction()...");
        setPreferredMenu("Apps.KEGGParser");
    }

    /**
     * DOCUMENT ME!
     *
     * @param e DOCUMENT ME!
     */
    public void actionPerformed(ActionEvent e) {
        tuningDialog = new KEGGTuningDialog(this);
    } // actionPerformed

    public void performTSETuning(CyNetwork network,
                                 String tissue, String geneIdAttr, String typeAttr,
                                 ArrayList<String> selectedTypes, int threshold,
                                 boolean generateNewNetwork) {

        logger.info("Tuning the network: " + network.getRow(network).get(CyNetwork.NAME, String.class));

        // Create Task

        final KEGGTuningTask task = new KEGGTuningTask(network, tissue, geneIdAttr,
                typeAttr, selectedTypes, threshold, generateNewNetwork, true);


        // Execute Task in New Thread; pop open JTask Dialog Box.
        KEGGParserPlugin.taskManager.execute(new TaskIterator(task));
    }


    public void performPPITuning(CyNetwork network,
                                 ArrayList<String> sources, String geneIdAttr, String typeAttr,
                                 ArrayList<String> selectedTypes, int threshold,
                                 boolean generateNewNetwork) {

        logger.info("Tuning the network: " + network.getRow(network).get("Name", String.class));

        // Create Task

        // Configure JTask Dialog Pop-Up Box
        final KEGGTuningTask task = new KEGGTuningTask(network, sources, geneIdAttr,
                typeAttr, selectedTypes, threshold, generateNewNetwork, false);

        // Execute Task in New Thread; pop open JTask Dialog Box.
        KEGGParserPlugin.taskManager.execute(new TaskIterator(task));
    }


    class KEGGTuningTask extends AbstractTask {
        private String tissue;
        private boolean generateNewNetwork;
        private CyNetwork network;
        private TaskMonitor taskMonitor;
        private String geneIdAttr;
        private String typeAttr;
        private ArrayList<String> typeAttrValues;
        private ArrayList<String> sources;
        private int threshold;
        private boolean isTSE;

        public KEGGTuningTask(CyNetwork network,
                              String tissue, String geneIdAttr,
                              String typeAttr, ArrayList<String> typeAttrValues,
                              int threshold, boolean generateNewNetwork, boolean isTSE) {
            this.tissue = tissue;
            this.generateNewNetwork = generateNewNetwork;
            this.network = network;
            this.geneIdAttr = geneIdAttr;
            this.threshold = threshold;
            this.typeAttr = typeAttr;
            this.typeAttrValues = typeAttrValues;
            this.isTSE = isTSE;
        }

        public KEGGTuningTask(CyNetwork network,
                              ArrayList<String> sources, String geneIdAttr,
                              String typeAttr, ArrayList<String> typeAttrValues,
                              int threshold, boolean generateNewNetwork, boolean isTSE) {
            this.sources = sources;
            this.generateNewNetwork = generateNewNetwork;
            this.network = network;
            this.geneIdAttr = geneIdAttr;
            this.threshold = threshold;
            this.typeAttr = typeAttr;
            this.typeAttrValues = typeAttrValues;
            this.isTSE = isTSE;
        }

        @Override
        public void run(TaskMonitor taskMonitor) throws Exception {
            TuningReportGenerator.getInstance().appendLine("\n" + (new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")).format(new Date()));
            TuningReportGenerator.getInstance().appendLine("Tuning the network: " + network.getRow(network).get(CyNetwork.NAME, String.class));
            TuningReportGenerator.getInstance().appendLine("Pathway name: " + network.getRow(network).get("Name", String.class));
            TuningReportGenerator.getInstance().appendLine("Pathway title: " + network.getRow(network).get("Title", String.class));
            TuningReportGenerator.getInstance().appendLine("Pathway link: " + network.getRow(network).get("Link", String.class));
            TuningReportGenerator.getInstance().appendLine("Pathway organism: " + network.getRow(network).get("Organism", String.class));

            taskMonitor.setTitle("KEGG tuning task");
            tuner = new Tuner(network, geneIdAttr,
                    typeAttr, typeAttrValues, threshold);
            taskMonitor.setStatusMessage("Tuning the network " + network.getRow(network).get("Name", String.class) +
                    ".\n\nIt may take a while.\nPlease wait...");
            taskMonitor.setProgress(0);

            boolean success = true;
            try {

                if (isTSE) {
                    TuningReportGenerator.getInstance().appendLine("Tuning mode: TSE");
                    tuner.setXmlFile(tuningDialog.getXmlFile());
                    tuner.setDataSet(tuningDialog.getTSEDataSet());
                    success = tuner.tuneByTSE(tissue, generateNewNetwork, taskMonitor, threshold);
                } else {
                    TuningReportGenerator.getInstance().appendLine("Tuning mode: PPI");
                    success = tuner.drillDownNetwork(network, network.getRow(network).get("Name", String.class) + "_drilled",
                            threshold, sources, taskMonitor);
                }
                if (!success)
                    cancel();

            } catch (Exception e) {
                taskMonitor.setStatusMessage("Error while tuning the network" + e.getMessage());
                TuningReportGenerator.getInstance().appendLine("Error while tuning the network: " + e.getMessage());
            } finally {
                System.gc();
            }
            if (success) {
                taskMonitor.setProgress(100);
                taskMonitor.setStatusMessage("The network " + network.getRow(network).get("Name", String.class) + " successfully tuned.");
            } else {
                taskMonitor.setProgress(100);
                taskMonitor.setStatusMessage("Tuning cancelled!");
            }
        }

        @Override
        public void cancel() {

            logger.info("Cancel called!!!");
            taskMonitor.setProgress(100);
            taskMonitor.setStatusMessage("Failed!!!");
            if (tuner.getTunedNetwork() != null) {
                Collection<CyNetworkView> networkViews =
                        KEGGParserPlugin.networkViewManager.getNetworkViews(tuner.getTunedNetwork());
                for (CyNetworkView networkView : networkViews)
                    KEGGParserPlugin.networkViewManager.destroyNetworkView(networkView);

                KEGGParserPlugin.networkManager.destroyNetwork(tuner.getTunedNetwork());
            }
            super.cancelled = true;

        }

    }
}
