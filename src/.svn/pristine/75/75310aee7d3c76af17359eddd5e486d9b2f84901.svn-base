package org.cytoscape.keggparser.parsing;


import org.cytoscape.keggparser.KEGGParserPlugin;
import org.cytoscape.keggparser.actions.KeggSaveAsBioPAXAction;
import org.cytoscape.keggparser.com.ParsingReportGenerator;
import org.cytoscape.work.TaskMonitor;

import java.io.*;

public class KGMLConverter {

    public static final int BioPAX2 = 0;
    public static final int BioPAX3 = 1;
    public static final String BioPAX_level2 = "BioPAX_level2";
    public static final String BioPAX_level3 = "BioPAX_level3";
    File keggTranslatorJarFile;
    private Thread executeCommandThread;
    private String command;
    private KeggSaveAsBioPAXAction.SaveBioPAXTask parentTask;

    public KGMLConverter() {
        try{
            keggTranslatorJarFile = KEGGParserPlugin.getKeggTranslatorJar();
        } catch (FileNotFoundException e){
            keggTranslatorJarFile = null;
        }
    }

    public boolean translateFromCmd(File kgmlFile, File outFile, int bioPaxLevel, TaskMonitor taskMonitor,
                                    KeggSaveAsBioPAXAction.SaveBioPAXTask saveBioPAXTask) {
        parentTask = saveBioPAXTask;
        if (keggTranslatorJarFile == null || !keggTranslatorJarFile.exists()) {
            ParsingReportGenerator.getInstance().appendLine("Unable to translate the kgml, since " +
                    "KeggTranslator jar file could not be found");
            return false;
        }

        String bioPaxLevelString = "";
        switch (bioPaxLevel) {
            case BioPAX2:
                bioPaxLevelString = BioPAX_level2;
                break;
            case BioPAX3:
                bioPaxLevelString = BioPAX_level3;
                break;
            default:
                bioPaxLevelString = BioPAX_level2;
        }

        command = String.format("java -jar %s --input %s --output %s --format %s",
                keggTranslatorJarFile.getAbsolutePath(),
                "\"" + kgmlFile.getAbsolutePath() + "\"",
                "\"" + outFile.getAbsolutePath() + "\"",
                bioPaxLevelString);
        ParsingReportGenerator.getInstance().appendLine("Calling KeggTranslator with the command: \n" + command);


        ExecuteCommandTask executeCommandTask = new ExecuteCommandTask(command);
        executeCommandThread = new Thread(executeCommandTask);
//        executeCommandTask.getRuntime().addShutdownHook(executeCommandThread);
        int maxTime = 50000;
        long maxExecutionTime = System.currentTimeMillis() + maxTime;
        executeCommandThread.start();
        while (!parentTask.iscancelled() && executeCommandThread.isAlive()) {
            if (System.currentTimeMillis() > maxExecutionTime) {
                String message = "The converter took more than "
                        + maxExecutionTime / 1000 + " s to execute. " +
                        "This may be due to presence of entities in the network " +
                        "incompatible with " + bioPaxLevelString;
                ParsingReportGenerator.getInstance().appendLine(message);
                taskMonitor.setStatusMessage(message);
                executeCommandThread.interrupt();
                break;
            }
//            System.out.println(System.currentTimeMillis());

            try {
                taskMonitor.setStatusMessage("Executing conversion with KeggTranslator. Time relapsed: "
                        + (maxTime - (maxExecutionTime - System.currentTimeMillis())) / 1000 + "s");
//                System.out.println("\ttimer:" + (int) (maxExecutionTime - System.currentTimeMillis()) / 1000 + "s");
                Thread.sleep(2000);
            } catch (InterruptedException t) {
                t.printStackTrace();
            }
        }


        if (outFile.exists() && outFile.length() != 0)
            return true;
        else return false;

    }

    public void stopTranslationTask() {
        if (executeCommandThread.isAlive())
            executeCommandThread.interrupt();
    }



    private class ExecuteCommandTask implements Runnable {
        private String command;


        ExecuteCommandTask(String commmand) {
            this.command = commmand;
        }

        @Override
        public void run() {
            Runtime runtime = Runtime.getRuntime();
            try {
                Process process = runtime.exec(command);

                InputStream inputStream = process.getInputStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
                String line;
                while ((line = reader.readLine()) != null) {
                    ParsingReportGenerator.getInstance().appendLine(line);
                }
            } catch (IOException e) {
                ParsingReportGenerator.getInstance().appendLine(e.getMessage());
            }
        }


    }


}
