package org.cytoscape.keggparser.parsing;


import org.cytoscape.event.CyEventHelper;
import org.cytoscape.keggparser.com.*;
import org.cytoscape.model.*;
import org.cytoscape.view.model.CyNetworkView;
import org.cytoscape.view.model.CyNetworkViewFactory;
import org.cytoscape.view.model.CyNetworkViewManager;
import org.cytoscape.view.model.View;
import org.cytoscape.view.presentation.property.BasicVisualLexicon;
import org.cytoscape.view.vizmap.VisualMappingFunctionFactory;
import org.cytoscape.view.vizmap.VisualMappingManager;
import org.cytoscape.view.vizmap.VisualStyle;
import org.cytoscape.view.vizmap.VisualStyleFactory;

import java.io.File;
import java.util.TreeMap;


public class KeggNetworkCreator_prev {

    private CyNetwork network;
    private CyNetworkView networkView;
    private CyTable cyNodeAttrs;
    private CyTable cyEdgeAttrs;
    private CyTable networkAttrs;
    private VisualStyle visualStyle;
    private Graph graph;

    private Long networkID;

    private CyNetworkFactory networkFactory;
    private CyNetworkViewFactory networkViewFactory;
    private CyNetworkManager networkManager;
    private CyNetworkViewManager networkViewManager;
    private VisualMappingManager visualMappingManager;
    private VisualMappingFunctionFactory vmfFactoryC;
    private VisualMappingFunctionFactory vmfFactoryD;
    private VisualMappingFunctionFactory vmfFactoryP;
    private VisualStyleFactory visualStyleFactory;
    private CyTableFactory tableFactory;
    private CyEventHelper cyEventHelper;

    CyTable nodeTable;
    CyTable edgeTable;

    public KeggNetworkCreator_prev(CyNetworkFactory networkFactory, CyNetworkViewFactory networkViewFactory,
                                   CyNetworkManager networkManager, CyNetworkViewManager networkViewManager,
                                   VisualMappingManager visualMappingManager,
                                   VisualMappingFunctionFactory vmfFactoryC,
                                   VisualMappingFunctionFactory vmfFactoryD,
                                   VisualMappingFunctionFactory vmfFactoryP,
                                   VisualStyleFactory visualStyleFactory, CyTableFactory tableFactory,
                                   CyEventHelper cyEventHelper) {
        this.networkFactory = networkFactory;
        this.networkViewFactory = networkViewFactory;
        this.networkManager = networkManager;
        this.networkViewManager = networkViewManager;
        this.visualMappingManager = visualMappingManager;
        this.vmfFactoryC = vmfFactoryC;
        this.vmfFactoryD = vmfFactoryD;
        this.vmfFactoryP = vmfFactoryP;
        this.visualStyleFactory = visualStyleFactory;
        this.tableFactory = tableFactory;
        this.cyEventHelper = cyEventHelper;
    }


    public CyNetwork createNetwork(File kgml) {
//        if (MetaNodePlugin2.viewerName == null)
//            new MetaNodePlugin2();
        Parser parser = new Parser();

        this.graph = parser.parse(kgml);
        if (EKeggProps.ProcessGroups.getOldValue())
            this.graph.flagGroupNodes();
        if (EKeggProps.ProcessCompounds.getOldValue())
            this.graph.processCompounds();
        if (EKeggProps.ProcessBindingDirs.getOldValue())
            this.graph.correctEdgeDirections();

        this.network = networkFactory.createNetwork();
        this.networkID = network.getSUID();
        this.visualStyle = visualStyleFactory.createVisualStyle(graph.getTitle());
        visualMappingManager.addVisualStyle(visualStyle);


//        this.cyNodeAttrs = Cytoscape.getNodeAttributes();
//        this.cyEdgeAttrs = Cytoscape.getEdgeAttributes();
//        this.networkAttrs = Cytoscape.getNetworkAttributes();
//        this.nac = defStyle.getNodeAppearanceCalculator();
//        this.eac = defStyle.getEdgeAppearanceCalculator();
//        this.gac = defStyle.getGlobalAppearanceCalculator();
//        visualStyle.getDependency().set(VisualPropertyDependency.Definition.NODE_SIZE_LOCKED, false);
//        final PassThroughMapping colorMapping = new PassThroughMapping(Color.class, "Color");
//        final Calculator nodeColorMappingCalc = new BasicCalculator(graph.getTitle() + "-" +
//                "Node_color_mapping", colorMapping, VisualPropertyType.NODE_FILL_COLOR);

//        final PassThroughMapping labelMapping = new PassThroughMapping(String.class, "Label");
//        final Calculator nodeLabelMappingCalc = new BasicCalculator(graph.getTitle() + "-" +
//                "Node_label_mapping", labelMapping, VisualPropertyType.NODE_LABEL);


        //Graph attributes
        CyTable networkTable = network.getDefaultNetworkTable();
        networkTable.setTitle(graph.getTitle());
        CyRow networkRow = networkTable.getRow(networkID);
        try {
            networkTable.createColumn("Title", String.class, false);
            networkTable.createColumn("Number", String.class, false);
            networkTable.createColumn("Link", String.class, false);
            networkTable.createColumn("Image", String.class, false);
            networkTable.createColumn("Name", String.class, false);
        } catch (IllegalArgumentException e) {

        }

        networkRow.set("Title", graph.getTitle());
        networkRow.set("Number", graph.getNumber());
        networkRow.set("Link", graph.getLink());
        networkRow.set("Image", graph.getImage());
        networkRow.set("Name", graph.getName());

        // Node Mapping
//        visualStyle.addVisualMappingFunction(vmfFactoryP.createVisualMappingFunction
//                ("Color", KeggNode.RECTANGLE.getClass(), BasicVisualLexicon.NODE_FILL_COLOR));
//        VisualMappingFunction<String, String> nodeLabelMapping = vmfFactoryP.createVisualMappingFunction
//                ("NodeLabel", String.class, BasicVisualLexicon.NODE_LABEL);
//        VisualMappingFunction<NodeShape, NodeShape> nodeShapeMapping = vmfFactoryD.createVisualMappingFunction
//                ("NodeShape", NodeShape.class, BasicVisualLexicon.NODE_SHAPE);
//
//        visualStyle.addVisualMappingFunction(vmfFactoryD.createVisualMappingFunction(
//                "Rectangle", KeggNode.RECTANGLE.getClass(),
//        ));
//
//        shapeMapping.putMapValue(KeggNode.RECTANGLE, NodeShape.RECT);
//        shapeMapping.putMapValue(KeggNode.ROUND_RECTANGLE, NodeShape.ROUND_RECT);
//        shapeMapping.putMapValue(KeggNode.CIRCLE, NodeShape.ELLIPSE);
//        shapeMapping.putMapValue(KeggNode.LINE, NodeShape.RECT);
//
//        final PassThroughMapping widthMapping = new PassThroughMapping(Number.class, "Width");
//        final Calculator nodeWidthMappingCalc = new BasicCalculator(graph.getTitle() + "-" +
//                "Node_width_mapping", widthMapping, VisualPropertyType.NODE_WIDTH);
//        final PassThroughMapping heightMapping = new PassThroughMapping(Number.class, "Height");
//        final Calculator nodeHeightMappingCalc = new BasicCalculator(graph.getTitle() + "-" +
//                "Node_height_mapping", heightMapping, VisualPropertyType.NODE_HEIGHT);
//
//        nac.setCalculator(nodeLabelMappingCalc);
//        nac.setCalculator(nodeColorMappingCalc);
//        nac.setCalculator(nodeShapeMappingCalc);
//        nac.setCalculator(nodeWidthMappingCalc);
//        nac.setCalculator(nodeHeightMappingCalc);
//        nac.getDefaultAppearance().set(VisualPropertyType.NODE_FONT_SIZE, 7);
//
//        //Edge Mapping
//        eac.getDefaultAppearance().set(VisualPropertyType.EDGE_FONT_SIZE, 12);
//        final DiscreteMapping arrowShapeMapping = new DiscreteMapping(ArrowShape.class, "ArrowShape");
//        final Calculator arrowShapeCalc = new BasicCalculator(graph.getTitle() + "-" +
//                "ArrowShapeMapping", arrowShapeMapping, VisualPropertyType.EDGE_TGTARROW_SHAPE);
//        arrowShapeMapping.putMapValue(ArrowShape.DELTA.getName(), ArrowShape.DELTA);
//        arrowShapeMapping.putMapValue(ArrowShape.T.getName(), ArrowShape.T);
//        arrowShapeMapping.putMapValue(ArrowShape.NONE.getName(), ArrowShape.NONE);
//        eac.setCalculator(arrowShapeCalc);
//
//        final DiscreteMapping edgeLineStyleMapping = new DiscreteMapping(LineStyle.class, "LineStyle");
//        final Calculator edgeLineStyleCalc = new BasicCalculator(graph.getTitle() + "-" +
//                "EdgeLineStyleMapping", edgeLineStyleMapping, VisualPropertyType.EDGE_LINE_STYLE);
//        edgeLineStyleMapping.putMapValue(LineStyle.LONG_DASH.name(), LineStyle.LONG_DASH);
//        edgeLineStyleMapping.putMapValue(LineStyle.PARALLEL_LINES.name(), LineStyle.PARALLEL_LINES);
//        edgeLineStyleMapping.putMapValue(LineStyle.SOLID.name(), LineStyle.SOLID);
//        edgeLineStyleMapping.putMapValue(LineStyle.DOT.name(), LineStyle.DOT);
//        edgeLineStyleMapping.putMapValue(LineStyle.ZIGZAG.name(), LineStyle.ZIGZAG);
//        eac.setCalculator(edgeLineStyleCalc);
//
//        final PassThroughMapping edgeLabelMapping = new PassThroughMapping(String.class, "EdgeLabel");
//        final Calculator edgeLabelCalc = new BasicCalculator(graph.getTitle() + "-" +
//                "EdgeLabelMapping", edgeLabelMapping, VisualPropertyType.EDGE_LABEL);
//        eac.setCalculator(edgeLabelCalc);


        //*********** Load nodes *************///

        nodeTable = network.getDefaultNodeTable();

        for (EKeggNodeAttrs attr : EKeggNodeAttrs.values()) {
            try {
                nodeTable.createColumn(attr.getAttrName(), String.class, false);
            } catch (IllegalArgumentException e) {
            }
        }
        TreeMap<Integer, Long> keggNodeIdMap = new TreeMap<Integer, Long>();
        for (KeggNode keggNode : graph.getNodes().values()) {
            CyNode node = network.addNode();

            keggNodeIdMap.put(keggNode.getId(), node.getSUID());
        }

        this.networkView = networkViewFactory.createNetworkView(network);
        cyEventHelper.flushPayloadEvents();
        networkManager.addNetwork(network);
        networkViewManager.addNetworkView(networkView);

        for (KeggNode keggNode : graph.getNodes().values()) {
            CyNode node = network.getNode(keggNodeIdMap.get(keggNode.getId()));
            CyRow nodeRow = nodeTable.getRow(node.getSUID());

            nodeRow.set(EKeggNodeAttrs.ENTRY_ID.getAttrName(), keggNode.getId() + "");
            nodeRow.set(EKeggNodeAttrs.LABEL.getAttrName(), keggNode.getCellName());
            nodeRow.set(EKeggNodeAttrs.NAME.getAttrName(), keggNode.getName());
            nodeRow.set(EKeggNodeAttrs.GRAPHICSNAME.getAttrName(), keggNode.getGraphicsName());
            nodeRow.set(EKeggNodeAttrs.EntrezIDs.getAttrName(), keggNode.getEntrezIDs());
            nodeRow.set(EKeggNodeAttrs.TYPE.getAttrName(), keggNode.getType());
            nodeRow.set(EKeggNodeAttrs.COLOR.getAttrName(), keggNode.getBgColor().toString());
            nodeRow.set(EKeggNodeAttrs.LINK.getAttrName(), keggNode.getLink());
            nodeRow.set(EKeggNodeAttrs.SHAPE.getAttrName(), keggNode.getShape());
            nodeRow.set(EKeggNodeAttrs.WIDTH.getAttrName(), keggNode.getWidth() + "");
            nodeRow.set(EKeggNodeAttrs.HEIGHT.getAttrName(), keggNode.getHeight() + "");
            nodeRow.set(EKeggNodeAttrs.COMMENT.getAttrName(), keggNode.getComment());
            nodeRow.set(EKeggNodeAttrs.GROUP.getAttrName(), keggNode.getGroupId() + "");
            nodeRow.set(EKeggNodeAttrs.FGCOLOR.getAttrName(), keggNode.getFgColorAttr().toString());
            nodeRow.set(EKeggNodeAttrs.BGCOLOR.getAttrName(), keggNode.getBgColorAttr().toString());


            View<CyNode> nodeView = networkView.getNodeView(node);

            nodeView.setVisualProperty(BasicVisualLexicon.NODE_X_LOCATION, (keggNode.getX() - 100));
            nodeView.setVisualProperty(BasicVisualLexicon.NODE_Y_LOCATION, (keggNode.getY() - 100));

        }
        //********* END of LOAD NODES ************////

        //************* LOAD Edges ***********///
        edgeTable = network.getDefaultEdgeTable();

        for (EKeggEdgeAttrs attr : EKeggEdgeAttrs.values()) {
            try {
                edgeTable.createColumn(attr.getAttrName(), String.class, false);
            } catch (IllegalArgumentException e) {
            }
        }

        for (KeggRelation relation : graph.getRelations()) {
            addCyEdge(relation, keggNodeIdMap);
        }
        //********* END of LOAD EDGES ************////

        networkManager.addNetwork(network);
//        Cytoscape.setCurrentNetwork(network.getIdentifier());
        //Later
        /*
        if (EKeggProps.ProcessGroups.getOldValue())
            createMetaNodes();
        */

//        if (!Cytoscape.getVisualMappingManager().getCalculatorCatalog().getVisualStyleNames().contains(defStyle.toString()))
//            Cytoscape.getVisualMappingManager().getCalculatorCatalog().addVisualStyle(defStyle);
////        Cytoscape.getVisualMappingManager().setVisualStyle(defStyle);

//        Cytoscape.getVisualMappingManager().setNetworkView(networkView);


        visualStyle.apply(networkView);
        networkView.updateView();

        return network;
    }


    private void addCyEdge(KeggRelation relation, TreeMap<Integer, Long> keggNodeIdMap) {
//        Collection<CyRow> rows1 = nodeTable.getMatchingRows
//                (EKeggNodeAttrs.ENTRY_ID.getAttrName(), networkID + relation.getEntry1().getId() + "");
//        CyNode node1 = (CyNode) rows1.toArray()[0];
        CyNode node1 = network.getNode(keggNodeIdMap.get(relation.getEntry1().getId()));
//        Collection<CyRow> rows2 = nodeTable.getMatchingRows
//                (EKeggNodeAttrs.ENTRY_ID.getAttrName(), networkID + relation.getEntry2().getId() + "");
//        CyNode node2 = (CyNode) rows2.toArray()[0];

        CyNode node2 = network.getNode(keggNodeIdMap.get(relation.getEntry2().getId()));
        CyEdge edge = network.addEdge(node1, node2, true);
        setEdgeAttributes(edge, relation);
    }



    /*public void createMetaNodes() {

        for (Map.Entry<Integer, KeggNode> keggNodeEntry : graph.getNodes().entrySet()) {
            ArrayList components = new ArrayList();
            ArrayList compIndices = new ArrayList();
            KeggNode groupNode;
            if (keggNodeEntry.getValue().getType().equals(KeggNode.GROUP)) {
                groupNode = keggNodeEntry.getValue();
                for (int id : groupNode.getComponentIds()) {
                    components.add(Cytoscape.getCyNode(networkID + id));
                    compIndices.add(Cytoscape.getCyNode(networkID + id).getRootGraphIndex());
                }


                //AbstractMetaNodeModeler factory = MetaNodeUtils.abstractModeler;
                //factory.
                CyNode groupCyNode = Cytoscape.getCyNode(networkID + groupNode.getId());
                String groupName = "GR" + network.getIdentifier() + "." + keggNodeEntry.getValue().getId();
                CyGroup group = CyGroupManager.createGroup(groupName, components, MetaNodePlugin2.viewerName, network);
                //Set metaNode attributes
                cyNodeAttrs.setAttribute(groupCyNode.getIdentifier(), EKeggNodeAttrs.ENTRY_ID.getAttrName(),
                        groupName);
                cyNodeAttrs.setAttribute(groupCyNode.getIdentifier(), EKeggNodeAttrs.LABEL.getAttrName(),
                        groupName);
                cyNodeAttrs.setAttribute(groupCyNode.getIdentifier(), EKeggNodeAttrs.GRAPHICSNAME.getAttrName(),
                        groupName);
                cyNodeAttrs.setAttribute(groupCyNode.getIdentifier(), EKeggNodeAttrs.COLOR.getAttrName(),
                        Color.MAGENTA.getRGB());

                copyKeggNodeAttributes(groupCyNode, group.getGroupNode());
                Cytoscape.getVisualMappingManager().vizmapNode(networkView.getNodeView(groupCyNode.getRootGraphIndex()),
                        networkView);
                manageMetanodeConnections(groupCyNode, group, groupName, network);
                MetaNode metaNode = MetaNodeManager.createMetaNode(group, false);
                metaNode.collapse(networkView);
            }
        }
    }         */

    /*private void manageMetanodeConnections(CyNode groupCyNode, CyGroup group, String groupName, CyNetwork network) {


        //Copy group edges to the metanode
        java.util.List<CyNode> neighbors = network.neighborsList(groupCyNode);
        for (CyNode neighbor : neighbors) {
            CyEdge prevEdge = null;
            CyEdge newEdge = null;

            if (network.edgeExists(neighbor, groupCyNode)) {
                prevEdge = (CyEdge) network.edgesList(neighbor, groupCyNode).get(0);
                Object edgeAttribute = cyEdgeAttrs.getAttribute(prevEdge.getIdentifier(), EKeggEdgeAttrs.TYPE_MAPPED.getAttrName());
                if (edgeAttribute == null)
                    edgeAttribute = "pp";
                newEdge = Cytoscape.getCyEdge(
                        neighbor,
                        group.getGroupNode(),
                        Semantics.INTERACTION,
                        edgeAttribute,
                        true);
            } else if (network.edgeExists(groupCyNode, neighbor)) {
                prevEdge = (CyEdge) network.edgesList(groupCyNode, neighbor).get(0);
                Object edgeAttribute = cyEdgeAttrs.getAttribute(prevEdge.getIdentifier(), EKeggEdgeAttrs.TYPE_MAPPED.getAttrName());
                if (edgeAttribute == null)
                    edgeAttribute = "pp";
                newEdge = Cytoscape.getCyEdge(
                        group.getGroupNode(),
                        neighbor,
                        Semantics.INTERACTION,
                        cyEdgeAttrs.getAttribute(prevEdge.getIdentifier(), EKeggEdgeAttrs.TYPE_MAPPED.getAttrName()),
                        true);
            }
            copyKeggEdgeAttributes(prevEdge, newEdge);
            network.addEdge(newEdge);
        }
        network.removeNode(groupCyNode.getRootGraphIndex(), true);

    }            */



    /*private void copyKeggNodeAttributes(CyNode source, CyNode dest) {
        if (cyNodeAttrs == null)
            cyNodeAttrs = Cytoscape.getNodeAttributes();
        for (EKeggNodeAttrs attrs : EKeggNodeAttrs.values()) {
            Object attribute = cyNodeAttrs.getAttribute(source.getIdentifier(), attrs.getAttrName());
            Object destAttr = cyNodeAttrs.getAttribute(dest.getIdentifier(), attrs.getAttrName());
            if (attribute != null && destAttr == null) {
                if (attribute instanceof String)
                    cyNodeAttrs.setAttribute(dest.getIdentifier(), attrs.getAttrName(),
                            (String) attribute);
                else if (attribute instanceof Double)
                    cyNodeAttrs.setAttribute(dest.getIdentifier(), attrs.getAttrName(),
                            (Double) attribute);
                else if (attribute instanceof Integer)
                    cyNodeAttrs.setAttribute(dest.getIdentifier(), attrs.getAttrName(),
                            (Integer) attribute);
                else if (attribute instanceof Boolean)
                    cyNodeAttrs.setAttribute(dest.getIdentifier(), attrs.getAttrName(),
                            (Boolean) attribute);

            }
        }

    }                  */

    private void setEdgeAttributes(CyEdge edge, KeggRelation relation) {
        CyRow edgeRow = edgeTable.getRow(edge.getSUID());

        edgeRow.set(EKeggEdgeAttrs.ENTRY1.getAttrName(), relation.getEntry1().getId() + "");
        edgeRow.set(EKeggEdgeAttrs.ENTRY2.getAttrName(), relation.getEntry2().getId() + "");
        edgeRow.set(EKeggEdgeAttrs.TYPE.getAttrName(), relation.getType());
        edgeRow.set(EKeggEdgeAttrs.TYPE_MAPPED.getAttrName(), mapRelationType(relation.getType()));
        edgeRow.set(EKeggEdgeAttrs.SUBTYPE1.getAttrName(), relation.getSubtype1());
        edgeRow.set(EKeggEdgeAttrs.SUBTYPE2.getAttrName(), relation.getSubtype2());
        edgeRow.set(EKeggEdgeAttrs.ARROWSHAPE.getAttrName(), relation.getArrowShape().getDisplayName());
        edgeRow.set(EKeggEdgeAttrs.LINESTYLE.getAttrName(), relation.getLineStyle().getDisplayName());
        edgeRow.set(EKeggEdgeAttrs.EDGELABEL.getAttrName(), relation.getEdgeLabel());
        edgeRow.set(EKeggEdgeAttrs.RELATIONVALUE1.getAttrName(), relation.getRelationValue1());
        edgeRow.set(EKeggEdgeAttrs.RELATIONVALUE2.getAttrName(), relation.getRelationValue2());
        edgeRow.set(EKeggEdgeAttrs.COMMENT.getAttrName(), relation.getComment());
    }

    /*private void copyKeggEdgeAttributes(CyEdge source, CyEdge dest) {
        if (cyEdgeAttrs == null)
            cyEdgeAttrs = Cytoscape.getEdgeAttributes();
        for (EKeggEdgeAttrs attrs : EKeggEdgeAttrs.values()) {
            Object attribute = cyEdgeAttrs.getAttribute(source.getIdentifier(), attrs.getAttrName());
            Object destAttr = cyEdgeAttrs.getAttribute(dest.getIdentifier(), attrs.getAttrName());
            if (attribute != null && (destAttr == null)) {
                if (attribute instanceof String)
                    cyEdgeAttrs.setAttribute(dest.getIdentifier(), attrs.getAttrName(),
                            (String) attribute);
                else if (attribute instanceof Double)
                    cyEdgeAttrs.setAttribute(dest.getIdentifier(), attrs.getAttrName(),
                            (Double) attribute);
                else if (attribute instanceof Integer)
                    cyEdgeAttrs.setAttribute(dest.getIdentifier(), attrs.getAttrName(),
                            (Integer) attribute);
                else if (attribute instanceof Boolean)
                    cyEdgeAttrs.setAttribute(dest.getIdentifier(), attrs.getAttrName(),
                            (Boolean) attribute);
            }
        }  */


    private int calculateFontSize(KeggNode keggNode) {
        int fontSize = keggNode.getWidth() * keggNode.getHeight() / keggNode.getCellName().length() / 15;
        if (fontSize > 17)
            fontSize = 17;
        return fontSize;
    }

    private String mapRelationType(String keggType) {
        if (keggType.equals(KeggRelation.PPrel))
            return "pp";
        if (keggType.equals(KeggRelation.PCrel))
            return "pp";
        if (keggType.equals(KeggRelation.ECrel))
            return "rc";
        if (keggType.equals(KeggRelation.GErel))
            return "pd";
        return "";
    }

}
