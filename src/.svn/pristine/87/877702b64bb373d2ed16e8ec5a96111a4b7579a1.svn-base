package org.cytoscape.keggparser.actions;


import org.cytoscape.application.CyApplicationConfiguration;
import org.cytoscape.application.swing.AbstractCyAction;
import org.cytoscape.event.CyEventHelper;
import org.cytoscape.keggparser.KEGGParserPlugin;
import org.cytoscape.keggparser.com.ParsingReportGenerator;
import org.cytoscape.keggparser.parsing.KeggNetworkCreator;
import org.cytoscape.model.CyNetworkFactory;
import org.cytoscape.model.CyNetworkManager;
import org.cytoscape.model.CyTableFactory;
import org.cytoscape.session.CySessionManager;
import org.cytoscape.view.model.CyNetworkViewFactory;
import org.cytoscape.view.model.CyNetworkViewManager;
import org.cytoscape.view.vizmap.VisualMappingFunctionFactory;
import org.cytoscape.view.vizmap.VisualMappingManager;
import org.cytoscape.view.vizmap.VisualStyleFactory;
import org.cytoscape.work.AbstractTask;
import org.cytoscape.work.TaskIterator;
import org.cytoscape.work.TaskMonitor;
import org.cytoscape.work.swing.DialogTaskManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;


public class KeggLoadAction extends AbstractCyAction {

    private CySessionManager cySessionManager;
    private CyApplicationConfiguration cyAppConfig;
    private CyEventHelper cyEventHelper;
    private static Logger logger = LoggerFactory.getLogger(KeggLoadAction.class);
    private CyNetworkFactory networkFactory;
    private CyNetworkViewFactory networkViewFactory;
    private CyNetworkManager networkManager;
    private CyNetworkViewManager networkViewManager;
    private VisualMappingManager visualMappingManager;
    private VisualMappingFunctionFactory vmfFactoryC;
    private VisualMappingFunctionFactory vmfFactoryD;
    private VisualMappingFunctionFactory vmfFactoryP;
    private VisualStyleFactory visualStyleFactory;
    private CyTableFactory tableFactory;
    private DialogTaskManager dialogTaskManager;


    public KeggLoadAction() {
        super("Load local KGML");
        this.dialogTaskManager = KEGGParserPlugin.taskManager;
        this.networkFactory = KEGGParserPlugin.networkFactory;
        this.networkViewFactory = KEGGParserPlugin.networkViewFactory;
        this.networkManager = KEGGParserPlugin.networkManager;
        this.networkViewManager = KEGGParserPlugin.networkViewManager;
        this.visualMappingManager = KEGGParserPlugin.visualMappingManager;
        this.vmfFactoryC = KEGGParserPlugin.vmfFactoryC;
        this.vmfFactoryD = KEGGParserPlugin.vmfFactoryD;
        this.vmfFactoryP = KEGGParserPlugin.vmfFactoryP;
        this.visualStyleFactory = KEGGParserPlugin.visualStyleFactory;
        this.tableFactory = KEGGParserPlugin.tableFactory;
        this.cySessionManager = KEGGParserPlugin.cySessionManager;
        this.cyAppConfig = KEGGParserPlugin.cyAppConfig;
        this.cyEventHelper = KEGGParserPlugin.cyEventHelper;
        setPreferredMenu("Apps.KEGGParser.Load KGML");
    }

    public void actionPerformed(ActionEvent e) {

        JFrame keggLoadFrame = new JFrame("KGML load window");
        keggLoadFrame.setLocation(400, 250);
        keggLoadFrame.setSize(400, 200);
        String recentDir = System.getProperty("user.home");
        JFileChooser fileChooser = new JFileChooser();
        File cyDir = cyAppConfig.getConfigurationDirectoryLocation();
        File keggDir = new File(cyDir, "3/apps/installed/CyKEGGParser");
        if (!keggDir.exists())
            keggDir.mkdir();
        File recentDirFile = new File(keggDir, "recentDir.txt");
        if (recentDirFile.exists()){
            try {
                java.util.Scanner scanner = new java.util.Scanner(recentDirFile);
                while (scanner.hasNext()){
                    recentDir = scanner.nextLine();
                    fileChooser.setCurrentDirectory(recentDirFile);
                }
            } catch (FileNotFoundException e1) {
                e1.printStackTrace();
            }
        }

        String kgmlFileName = "";
        fileChooser.setCurrentDirectory(new File(recentDir));
        fileChooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() ? true : f.getName().toLowerCase().endsWith(".xml");
            }

            @Override
            public String getDescription() {
                return "xml";
            }
        });

        fileChooser.setDialogTitle("Load local xml");
        fileChooser.showOpenDialog(keggLoadFrame);

        if (fileChooser.getSelectedFile() != null) {
            kgmlFileName = fileChooser.getSelectedFile().getAbsolutePath();

            try {
                PrintWriter recentDirWriter = new PrintWriter(recentDirFile);
                recentDirWriter.write(fileChooser.getSelectedFile().toString());
                recentDirWriter.close();
            } catch (FileNotFoundException e1) {
                e1.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            }


            logger.info("Opening session file: " + kgmlFileName);

            // Create Task
            final ParseKgmlTask task = new ParseKgmlTask(kgmlFileName);
            // Configure JTask Dialog Pop-Up Box
            dialogTaskManager.execute(new TaskIterator(task));
        }

    }


    class ParseKgmlTask extends AbstractTask {
        private String fileName;
        private TaskMonitor taskMonitor;

        public ParseKgmlTask(String fileName) {
            this.fileName = fileName;
        }

        @Override
        public void run(TaskMonitor taskMonitor) throws Exception {
            ParsingReportGenerator.getInstance().appendLine("\n" + (new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")).format(new Date()) +
                    "\nParsing kgml file " + fileName + "");
            taskMonitor.setTitle("Kegg parsing task");
            taskMonitor.setStatusMessage("Parsing KGML file.\n\nIt may take a while.\nPlease wait...");
            taskMonitor.setProgress(0.1);


            try {
                KeggNetworkCreator keggNetworkCreator = new KeggNetworkCreator();
                keggNetworkCreator.createNetwork(new File(fileName));
            } catch (Exception e) { // catch any exception: the user should know something went wrong
                taskMonitor.setStatusMessage("Error while parsing KGML " + e.getMessage() +
                        ".\n\nRefer to error console for details.");
                logger.error("Error while parsing KGML: " + e.getMessage(), e);
                ParsingReportGenerator.getInstance().appendLine("Error while parsing KGML: " + e.getMessage());
            } finally {
                System.gc();
            }

            taskMonitor.setStatusMessage("KGML file " + fileName + " successfully parsed.");
            ParsingReportGenerator.getInstance().appendLine("KGML file " + fileName + " successfully parsed.");
            taskMonitor.setProgress(1.0);
        }

    }



}

