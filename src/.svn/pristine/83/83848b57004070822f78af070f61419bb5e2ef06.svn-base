package org.cytoscape.keggparser.com;


import junit.framework.TestResult;
import junit.textui.TestRunner;
import org.cytoscape.keggparser.parsing.Parser;
import org.junit.*;
import org.junit.rules.ExpectedException;

import java.io.File;
import java.util.ArrayList;
import java.util.Map;

import static junit.framework.Assert.assertNull;
import static org.junit.Assert.*;


public class GraphTest implements junit.framework.Test{
    public GraphTest(){}
    public GraphTest(Graph graph){
        System.out.println( graph.getName());
    }
    private static ArrayList<Graph> testGraphs = new ArrayList<>();

        @Rule
        public ExpectedException thrown = ExpectedException.none();

        @After
        public void tearDown() {
            thrown = ExpectedException.none();
        }
        @BeforeClass
        public static void setUp() {

            Parser parser = new Parser();
//            Graph graph;
//            graph = parser.parse(new File("src/test/testdata/hsa04062.xml"));
//            if (graph != null) testGraphs.add(graph);
//            graph = parser.parse(new File("src/test/testdata/hsa00010.xml"));
//            if (graph != null) testGraphs.add(graph);
//            graph = parser.parse(new File("src/test/testdata/hsa00020.xml"));
//            if (graph != null) testGraphs.add(graph);
//            graph = (parser.parse(new File("src/test/testdata/hsa04662.xml")));
//            if (graph != null) testGraphs.add(graph);
//            graph = (parser.parse(new File("src/test/testdata/52_p53 signaling pathway.xml")));
//            if (graph != null) testGraphs.add(graph);
            testGraphs.add(new Graph());

        }

        @AfterClass
        public static void cleanUp() {
            testGraphs = new ArrayList<>();
        }


        @Test
        public void testConstructor() {
            for (Graph graph : testGraphs) {
                assertNotNull(graph.getNodes());
                assertNotNull(graph.getRelations());
            }
        }

        @Test
        public void testAddNode() {
            for (Graph graph : testGraphs) {
                graph.addNode(new KeggNode(1, "", KeggNode.GENE));
                assertTrue(graph.getNodes().containsKey(1));
                thrown.expect(IllegalArgumentException.class);
                graph.addNode(null);
            }
        }

        @Test
        public void testGetNode() {
            for (Graph graph : testGraphs) {
                for (int id : new int[]{1, 100, 200}) {
                    KeggNode keggNode = (new KeggNode(id, "", KeggNode.GENE));
                    if (graph.getNodes().containsKey(id)) {
                        graph.addNode(keggNode);
                        assertEquals(id, graph.getNode(id).getId());
                        assertNotSame(keggNode, graph.getNode(id));
                    } else {
                        graph.addNode(keggNode);
                        assertEquals(keggNode, graph.getNode(id));
                    }
                }
                assertNull(graph.getNode(0));
            }
        }

        @Test
        public void testAddRelation() {
            for (Graph graph : testGraphs) {
                KeggRelation keggRelation = new KeggRelation(new KeggNode(1, "", KeggNode.GENE),
                        new KeggNode(2, "", KeggNode.GENE), KeggRelation.PPrel);
                graph.addRelation(keggRelation);
                assertTrue(graph.getRelations().contains(keggRelation));
                thrown.expect(IllegalArgumentException.class);
                graph.addRelation(null);
            }
        }

        @Test
        public void testEdgeExists() {
            for (Graph graph : testGraphs) {
                KeggRelation keggRelation = new KeggRelation(new KeggNode(1, "", KeggNode.GENE),
                        new KeggNode(2, "", KeggNode.GENE), KeggRelation.PPrel);
                graph.addRelation(keggRelation);
                assertFalse(graph.edgeExists(null, keggRelation.getEntry1()));
                assertTrue(graph.edgeExists(keggRelation.getEntry1(), keggRelation.getEntry2()));
                assertFalse(graph.edgeExists(keggRelation.getEntry2(), keggRelation.getEntry1()));
            }
        }

        @Test
        public void testGetRelation() {
            for (Graph graph : testGraphs) {
                KeggRelation keggRelation = new KeggRelation(new KeggNode(1, "", KeggNode.GENE),
                        new KeggNode(2, "", KeggNode.GENE), KeggRelation.PPrel);
                graph.addRelation(keggRelation);
                assertEquals(keggRelation, graph.getRelation(keggRelation.getEntry1(),
                        keggRelation.getEntry2()));
                assertNotSame(keggRelation, graph.getRelation(keggRelation.getEntry2(),
                        keggRelation.getEntry1()));
                assertNull(graph.getRelation(null, null));
            }
        }

        @Test
        public void testGetNodeRelations() {
            for (Graph graph : testGraphs) {
                for (KeggNode keggNode : graph.getNodes().values()) {
                    for (KeggRelation keggRelation : graph.getNodeRelations(keggNode)) {
                        assertTrue(keggRelation.getEntry1().equals(keggNode) ||
                                keggRelation.getEntry2().equals(keggNode));
                    }
                }
            }
        }

        @Test
        public void testProcessGroups() {
            for (Graph graph : testGraphs) {
                graph.processGroups();
                for (Map.Entry<Integer, KeggNode> nodeEntry : graph.getNodes().entrySet()) {
                    KeggNode node = nodeEntry.getValue();
                    if (node.getGroupId() > 0) {
                        int size = graph.getNodeRelations(node).size();
                        assert size > 1;
                        int inGroupRelationCount = 0;
                        for (KeggRelation relation : graph.getNodeRelations(node)) {
                            if (!relation.getEntry1().equals(node)) {
                                if (relation.getEntry1().getGroupId() > 0)
                                    inGroupRelationCount++;
                            } else if (!relation.getEntry2().equals(node)) {
                                if (relation.getEntry2().getGroupId() > 0)
                                    inGroupRelationCount++;
                            }
                        }

                        if (size == 2)
                            assertTrue(inGroupRelationCount == 1 || inGroupRelationCount == 2);
                        else
                            assert inGroupRelationCount == 2;
                    }
                }

            }

        }

        @Test
        public void testRemoveRelation(){


        }


    @Override
    public int countTestCases() {
        return 0;  //To change body of implemented methods use File | Settings | File Templates.
    }

    @Override
    public void run(TestResult testResult) {
        //To change body of implemented methods use File | Settings | File Templates.
    }



    public static void main(String[] args) {
        TestRunner testRunner = new TestRunner();
        Graph graph;
        Parser parser = new Parser();
        graph = parser.parse(new File("src/test/testdata/hsa04062.xml"));
        testRunner.doRun(new GraphTest(graph));
    }

}

