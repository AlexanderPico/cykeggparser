package org.cytoscape.keggparser.actions;

import org.cytoscape.application.swing.AbstractCyAction;
import org.cytoscape.keggparser.KEGGParserPlugin;
import org.cytoscape.keggparser.com.ParsingReportGenerator;
import org.cytoscape.keggparser.dialogs.KeggSaveDialog;
import org.cytoscape.keggparser.parsing.KGMLConverter;
import org.cytoscape.keggparser.parsing.KGMLCreator;
import org.cytoscape.work.AbstractTask;
import org.cytoscape.work.TaskIterator;
import org.cytoscape.work.TaskMonitor;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;


public class KeggSaveAsBioPAXAction extends AbstractCyAction {
    private int bioPaxLevel;
    public KeggSaveAsBioPAXAction(int bioPaxLevel, String menuName) {
        super(menuName);
        this.bioPaxLevel = bioPaxLevel;
        setPreferredMenu("Apps.KEGGParser.Save network");
    }


    public void actionPerformed(ActionEvent e) {
        JFrame keggSaveFrame = new JFrame("KGML save window");
        keggSaveFrame.setLocation(400, 250);
        keggSaveFrame.setSize(400, 200);
        KeggSaveDialog saveDialog;
        if (bioPaxLevel == KGMLConverter.BioPAX2)
            saveDialog = new KeggSaveDialog(".bp2");
        else if (bioPaxLevel == KGMLConverter.BioPAX3)
            saveDialog = new KeggSaveDialog(".bp3");
        else{
            LoggerFactory.getLogger(KeggSaveAsBioPAX2Action.class).error("Ivalid bioPax level has been specified.");
            ParsingReportGenerator.getInstance().appendLine("Ivalid bioPax level has been specified.");
            return;
        }
        int response = saveDialog.showSaveDialog(KEGGParserPlugin.cytoscapeDesktopService.getJFrame());
        if (response == KeggSaveDialog.CANCEL_OPTION)
            return;
        File outFile = saveDialog.getSelectedFile();
        String outFileName;
        if (outFile != null){

            outFileName = outFile.getAbsolutePath();
            try {
                PrintWriter recentDirWriter = new PrintWriter(saveDialog.getRecentDir());
                recentDirWriter.write(outFile.getParent());
                recentDirWriter.close();
            } catch (FileNotFoundException e1) {
                e1.printStackTrace();
            }


            LoggerFactory.getLogger(KeggSaveAsBioPAXAction.class).info("Saving network to: " + outFileName);

            // Create Task

            final SaveBioPAXTask task = new SaveBioPAXTask(outFile);

            KEGGParserPlugin.taskManager.execute(new TaskIterator(task));
        }

    }



    public class SaveBioPAXTask extends AbstractTask {
        private File outFile;
        private TaskMonitor taskMonitor;

        public SaveBioPAXTask(File outFile) {
            this.outFile = outFile;
//            super.cancelled = false;
        }

        @Override
        public void run(TaskMonitor taskMonitor) throws Exception {
            this.taskMonitor = taskMonitor;
            taskMonitor.setTitle("Kegg saving task");
            taskMonitor.setStatusMessage("Saving KGML file.\n\nIt may take a while.\nPlease wait...");
            ParsingReportGenerator.getInstance().appendLine("Saving the network as BioPAX_level2 to " +
                    outFile.getAbsolutePath());
            taskMonitor.setProgress(0);

            try {
                KGMLCreator kgmlCreator = new KGMLCreator();
                String kgmlFileName;
                String suffix = "";
                if (bioPaxLevel == KGMLConverter.BioPAX2)
                    suffix = ".bp2";
                else if (bioPaxLevel == KGMLConverter.BioPAX3)
                    suffix = ".bp3";
                if (outFile.getName().contains(suffix))
                    kgmlFileName = outFile.getName().replace(suffix, ".xml");
                else
                    kgmlFileName = outFile.getName();
                File kgmlFile = new File(KEGGParserPlugin.getKEGGParserDir(), "/kgml/" + kgmlFileName);
                kgmlCreator.setFilterForConversion(bioPaxLevel);
                kgmlCreator.createKGML(KEGGParserPlugin.cyApplicationManager.getCurrentNetwork(), kgmlFile);
                taskMonitor.setStatusMessage("KGML file " + kgmlFile.getAbsolutePath() + " successfully generated.");
                ParsingReportGenerator.getInstance().appendLine("KGML file saved to " + kgmlFile.getAbsolutePath());
                taskMonitor.setStatusMessage("Converting KGML file " + kgmlFile.getAbsolutePath()
                        + " to " + suffix + " file");
                KGMLConverter kgmlConverter = new KGMLConverter();


                if (kgmlConverter.translateFromCmd(kgmlFile, outFile, bioPaxLevel, taskMonitor, this)){
                    taskMonitor.setStatusMessage("BioPAX file " + outFile.getAbsolutePath() + " successfully generated.");
                    taskMonitor.setProgress(100);
                }
                else {
                    taskMonitor.setStatusMessage("Problem saving network as " + suffix);
                    ParsingReportGenerator.getInstance().appendLine("Problem saving network as " + suffix);
                    cancel();
                }


            } catch (Exception e) { // catch any exception: the user should know something went wrong
                taskMonitor.setStatusMessage("Error while saving KGML " + e.getMessage() +
                        ".\n\nRefer to error console for details.");
                ParsingReportGenerator.getInstance().appendLine("Error while saving KGML " + e.getMessage() +
                        ".\n\nRefer to error console for details.");
            } finally {
                System.gc();
            }
        }



        @Override
        public void cancel() {

            LoggerFactory.getLogger(KeggSaveAsBioPAXAction.class).info("Cancel called!!!");
            taskMonitor.setProgress(100);
            super.cancelled = true;
            System.gc();

        }


        public boolean iscancelled() {
            return cancelled;
        }
    }

}

